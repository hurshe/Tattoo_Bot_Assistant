import os
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from bot_app.db_manager import DBManager
from bot_app.conversation_handler import user_answers
from bot_app.chat_actions import delete_messages

load_dotenv()
admin_chat_id = os.getenv('ADMIN_ID')
sub_admin_id = os.getenv('SUB_ADMIN_ID')

db = DBManager('tattoo_bot_telegram.db')


class AdminCommands:
    """
    AdminCommands Class Description

    The `AdminCommands` class encapsulates a set of static methods tailored for administrative tasks within a Telegram 
    bot application. These methods enable administrators to manage vouchers, view statistics, and perform other 
    administrative actions. Each method handles specific functionalities, ensuring efficient administration and user 
    interaction.
    
    Attributes: - None within the class itself, but the class utilizes external resources such as image paths for
    sending media content.
    
    Static Methods:
    
    1. `admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE)`
       - Handles the main administrative command, displaying a menu of available admin options based on user privileges.
       - Checks if the user is an admin or sub-admin and sends appropriate menu options.
       
    2. `add_voucher(update: Update, context: ContextTypes.DEFAULT_TYPE)`
       - Initiates the process of adding a new voucher to the system by prompting the admin for voucher details.
       - Provides instructions on how to add a voucher and cancel the operation if needed.
    
    3. `accept_add_voucher(update: Update, context: ContextTypes.DEFAULT_TYPE)`
       - Validates and adds a new voucher to the system if it does not already exist.
       - Notifies the admin of success or failure in adding the voucher.
    
    4. `statistics_command(update: Update, context: ContextTypes.DEFAULT_TYPE)` - Displays statistical
    information related to voucher usage and sales. - Provides insights into the number of people who have used the 
    bot, total vouchers sold, total sales amount, and the latest sale.
    
    5. `view_all_active_vouchers(update: Update, context: ContextTypes.DEFAULT_TYPE)`
       - Displays all active vouchers available in the system.
       - Allows the admin to navigate through the list of active vouchers.
    
    6. `view_selected_active_voucher(update: Update, context: ContextTypes.DEFAULT_TYPE)`
       - Provides detailed information about a selected active voucher.
       - Allows the admin to activate the selected voucher for use.
    
    7. `view_selected_deactivate_voucher(update: Update, context: ContextTypes.DEFAULT_TYPE)`
       - Displays details of all deactivated vouchers.
       - Notifies if there are no deactivated vouchers available.
    
    8. `activate_voucher(update: Update, context: ContextTypes.DEFAULT_TYPE)`
       - Activates a selected voucher for use.
       - Notifies the admin upon successful activation of the voucher.
    
    9. `send_db_file_in_chat(update: Update, context: ContextTypes.DEFAULT_TYPE)`
       - Sends the database file to the chat.
       - Allows the admin to retrieve the database file for external use or backup purposes.
    
    Usage: - These static methods can be called within the context of a Telegram bot application to perform various
    administrative tasks such as managing vouchers, viewing statistics, and accessing the database. Each method provides 
    specific functionalities to streamline the administration process and enhance user experience.
    
    Note: This class assumes integration with a Telegram bot application and utilizes external resources such as
    image paths for media content."""
    
    @staticmethod
    async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        admin = [int(admin_chat_id), int(sub_admin_id)]

        await delete_messages(update, context)

        if chat_id in admin:
            check_voucher_button = InlineKeyboardButton('๐ ะัะพัะผะพััะตัั ะฐะบัะธะฒะฝัะต ะฒะฐััะตัั', callback_data='check_voucher')
            check_deactivated_voucher_button = InlineKeyboardButton('โะัะพัะผะพััะตัั ะฝะตะฐะบัะธะฒัะฝะต ะฒะฐััะตัั',
                                                                    callback_data='activated')
            add_voucher_button = InlineKeyboardButton('โ ะะพะฑะฐะฒะธัั ะฝะพะฒัะน ะฒะฐััะตั', callback_data='add_voucher')
            show_statistics_button = InlineKeyboardButton('๐ ะะพะบะฐะทะฐัั ััะฐัะธััะธะบั', callback_data='statistics')
            get_db_file_in_chat_btn = InlineKeyboardButton('๐๏ธ ะะพะปััะธัั ัะฐะนะป ั ะฑะฐะทะพะน ะดะฐะฝะฝัั', callback_data='db_in_chat')
            all_commands_button = InlineKeyboardButton('๐คะะตัะฝััััั ะฒ ะณะปะฐะฒะฝะพะต ะผะตะฝั', callback_data='all_commands')

            keyboard = InlineKeyboardMarkup([[check_voucher_button],
                                             [check_deactivated_voucher_button],
                                             [add_voucher_button],
                                             [show_statistics_button],
                                             [get_db_file_in_chat_btn],
                                             [all_commands_button]])

            await context.bot.send_photo(chat_id=chat_id, photo=img_path.get('admin_image'), reply_markup=keyboard)
        else:
            back_button = InlineKeyboardButton('โช ะะฐะทะฐะด', callback_data='all_commands')
            keyboard = InlineKeyboardMarkup([[back_button]])

            await context.bot.send_photo(chat_id=chat_id, photo='bot_app/media/denied.jpg',
                                         caption="ะัะบะฐะทะฐะฝะพ ะฒ ะดะพัััะฟะต. Access Denied. Odmowa dostฤpu.",
                                         reply_markup=keyboard)

    @staticmethod
    async def add_voucher(update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id

        back_button = InlineKeyboardButton('โช ะะฐะทะฐะด', callback_data='admin')
        keyboard = InlineKeyboardMarkup([[back_button]])

        await delete_messages(update, context)
        await context.bot.send_message(chat_id=chat_id,
                                       text='ะะพะผะฐะฝะดะฐ [/add] ะทะฐะฟัะพัะธั ะดะฐะฝะฝัะต ะดะปั ะฝะพะฒะพะณะพ ะฒะฐััะตัะฐ.\n'
                                            'ะะพะผะฐะฝะดะฐ [/cancel] ะพัะผะตะฝะธั ะทะฐะฟะธัั ะฝะพะฒะพะณะพ ะฒะฐััะตัะฐ.\n\n'
                                            'ะะพัะปะต ะทะฐะฟะธัะธ ะดะฐะฝะฝัั ะฒั ัะผะพะถะตัะต ะฟัะพัะผะพััะตัั ะธ ะฐะบัะธะฒะธัะพะฒะฐัั ะดะพะฑะฐะฒะปะตะฝัะต '
                                            'ะฒะฐะผะธ ะธ '
                                            'ะฑะพัะพะผ ะฒะฐััะตัั ะฒ ะฑะฐะทะต.\n '
                                            'ะัะฟะพะปัะทัั ะบะพะผะฐะฝะดั /admin', reply_markup=keyboard)

    @staticmethod
    async def accept_add_voucher(update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        selected_voucher = user_answers.get('question_1')
        vouchers_in_db = db.get_all_active_voucher_code()
        vouchers_in_db = [item[0] for item in vouchers_in_db]
        admin = [int(admin_chat_id), int(sub_admin_id)]

        back_btn = InlineKeyboardButton('โช BACK', callback_data='all_commands')
        keyboard = InlineKeyboardMarkup([[back_btn]])

        if chat_id not in admin:
            await context.bot.send_photo(chat_id=chat_id, photo='media/denied.jpg',
                                         caption="ะัะบะฐะทะฐะฝะพ ะฒ ะดะพัััะฟะต. Access Denied. Odmowa dostฤpu.",
                                         reply_markup=keyboard)
        else:
            if selected_voucher in vouchers_in_db:
                await context.bot.send_message(chat_id=chat_id,
                                               text="ะขะฐะบะพะน ะบะพะด ัะถะต ัััะตััะฒัะตั, ะฟะพะฟัะพะฑัะนัะต ะตัะต ัะฐะท! /add")
            else:
                await context.bot.send_message(chat_id=chat_id,
                                               text=f"ะะฐััะตั ั ะบะพะดะพะผ  {selected_voucher}  ััะฟะตัะฝะพ ะดะพะฑะฐะฒะปะตะฝ ะฒ ะฑะฐะทั")
                return db.add_voucher_to_db(chat_id)
            return db.delete_data_from_db(chat_id)

    @staticmethod
    async def statistics_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        stat_info = db.get_statistics_of_vouchers(chat_id)

        people = stat_info[0] if stat_info is not None else '0'
        sold_vouchers = stat_info[1] if stat_info is not None else '0'
        amount_sales = stat_info[2] if stat_info is not None else '0'
        last_sold_voucher = stat_info[3] if stat_info is not None else 'ะัะพะดะฐะถ ะฝะต ะฑัะปะพ '

        back_button = InlineKeyboardButton('โช ะะฐะทะฐะด', callback_data='admin')

        keyboard = InlineKeyboardMarkup([[back_button]])

        await delete_messages(update, context)
        await context.bot.send_photo(chat_id=chat_id,
                                     photo=img_path.get('stat_image'),
                                     caption=f"๐ง ะัะดะตะน ะฟะพัะตัะธะปะพ TattooBotAssistant:\n"
                                             f"-------->  {people} ัะตะปะพะฒะตะบ\n"
                                             f"๐ฅ ะะฐััะตัะพะฒ ะฑัะปะพ ะฟัะพะดะฐะฝะฝะพ ะฒะพะพะฑัะตะผ:\n"
                                             f"-------->  {sold_vouchers} ะฒะฐััะตัะพะฒ\n"
                                             f"๐ฐ ะกัะผะผะฐ ะพะฑัะตะน ะฟัะพะดะฐะถะธ ะพั ะฒะฐััะตัะพะฒ:\n"
                                             f"-------->  {amount_sales} PLN\n"
                                             f"๐ ะัะปะฐ ัะพะฒะตััะตะฝะฐ ะฟะพัะปะตะดะฝัั ะฟะพะบัะฟะบะฐ:\n"
                                             f"-------->  {last_sold_voucher}",
                                     reply_markup=keyboard)

    @staticmethod
    async def view_all_active_vouchers(update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        active_vouchers = db.get_all_active_voucher_code()

        buttons = {item[0]: item[0] for item in active_vouchers}
        buttons["โช ะะฐะทะฐะด"] = "admin"
        buttons_per_row = 3

        keyboard_buttons = [
            [
                InlineKeyboardButton(button_text, callback_data=callback_data)
                for button_text, callback_data in buttons.items()
            ][i:i + buttons_per_row]
            for i in range(0, len(buttons), buttons_per_row)

        ]

        keyboard_markup = InlineKeyboardMarkup(keyboard_buttons)

        await delete_messages(update, context)

        if not active_vouchers:
            await context.bot.send_photo(chat_id=chat_id, photo=img_path.get('empty_data'),
                                         caption="ะะพะบะฐ ะบัะฟะปะตะฝะฝัั ะฒะฐััะตัะพะฒ ะฝะตั.", reply_markup=keyboard_markup)
        else:
            await context.bot.send_photo(chat_id=chat_id, photo=img_path.get('active_vouchers_img'),
                                         caption='โ ะัะต ะฐะบัะธะฒะฝัะต ะฒะฐััะตัั (ะตัะต ะฝะต ะธัะฟะพะปัะทะพะฒะฐะฝัะต).',
                                         reply_markup=keyboard_markup)

    @staticmethod
    async def view_selected_active_voucher(update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        selected_voucher = db.get_selected_voucher(chat_id)
        price_of_selected_voucher = db.get_price_voucher(chat_id, selected_voucher)

        activate_button = InlineKeyboardButton('ACTIVATE', callback_data='activate')
        back_button = InlineKeyboardButton('โช ะะฐะทะฐะด', callback_data='check_voucher')

        keyboard = InlineKeyboardMarkup([[activate_button], [back_button]])

        await delete_messages(update, context)
        await context.bot.send_message(chat_id=chat_id,
                                       text=f"ะั ะฒัะฑัะฐะปะธ ะฒะฐััะตั:\n\n"
                                            f"ID:  {selected_voucher}\n"
                                            f"ะฆะตะฝะฐ: {price_of_selected_voucher} PLN\n\n"
                                            f"ะัะฑะตัะธัะต [ACTIVATE] ะดะปั ะฐะบัะธะฒะฐัะธะธ ะฒะฐััะตัะฐ.\n"
                                            f"โะะะะะ - ะะพัะปะต ะฐะบัะธะฒะฐัะธะธ ะฒะฐััะตั ััะฐะฝะตั ะฝะต ะฟัะธะณะพะดะฝัะผ\n"
                                            f"ะธ ะฑัะดะตั ะฝะฐัะพะดะธัััั ะฒ ะฑะฐะทะต ะบะฐะบ ะธัะฟะพะปัะทะพะฒะฐะฝัะน ะฒะฐััะตั!\n"
                                            f"ะ /admin ะฟะฐะฝะตะปะธ ะตััั ััะฝะบัะธั 'ะัะพัะผะพััะตัั ะธัะฟะพะปัะทะพะฒะฐะฝัะต ะฒะฐััะตัั'",
                                       reply_markup=keyboard)

    @staticmethod
    async def view_selected_deactivate_voucher(update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        selected_deactivate_voucher = db.get_deactivate_voucher(chat_id)

        back_button = InlineKeyboardButton('โช ะะฐะทะฐะด', callback_data='admin')
        keyboard = InlineKeyboardMarkup([[back_button]])

        voucher_message = 'ะะพั ะฒัะต ะธัะฟะพะปัะทะพะฒะฐะฝัะต ะฒะฐััะตัั:\n'

        await delete_messages(update, context)

        if not selected_deactivate_voucher:
            await context.bot.send_photo(chat_id=chat_id,
                                         photo=img_path.get('empty_data'),
                                         caption='ะะพะบะฐ ะฐะบัะธะฒะธัะพะฒะฐะฝัั ะฒะฐััะตัะพะฒ ะฝะตั!',
                                         reply_markup=keyboard)
        else:
            for voucher_data in selected_deactivate_voucher:
                voucher_message += f'โ\nID: {voucher_data[0]}\nValue: {voucher_data[1]}\nDate: {voucher_data[2]}\n'

            await context.bot.send_photo(chat_id=chat_id,
                                         photo=img_path.get('active_vouchers_img'),
                                         caption=voucher_message,
                                         reply_markup=keyboard)

    @staticmethod
    async def activate_voucher(update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        selected_voucher = db.get_selected_voucher(chat_id)
        activate = db.activate_voucher(chat_id)
        await context.bot.send_message(chat_id=chat_id, text=f"ะะฐััะตั:  {selected_voucher}  ะฑัะป ะฐะบัะธะฒะธัะพะฒะฐะฝ!")
        return activate

    @staticmethod
    async def send_db_file_in_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        db_file = '/tattoo_bot_telegram.db'

        await context.bot.send_document(chat_id=chat_id, document=db_file)


img_path = {
    'admin_image': 'bot_app/media/admin_image.jpg',
    'admin_error': 'bot_app/media/denied.jpg',
    'active_vouchers_img': 'bot_app/media/active_voucher.jpg',
    'empty_data': 'bot_app/media/empty_data.jpg',
    'stat_image': 'bot_app/media/statistic_photo.jpg'
}
